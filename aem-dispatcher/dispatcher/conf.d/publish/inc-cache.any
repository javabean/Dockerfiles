# https://helpx.adobe.com/experience-manager/dispatcher/using/dispatcher-configuration.html#ConfiguringtheDispatcherCachecache

    # The cache section regulates what responses will be cached and where.
    /cache
      {
      # The docroot must be equal to the document root of the webserver. The
      # dispatcher will store files relative to this directory and subsequent
      # requests may be "declined" by the dispatcher, allowing the webserver
      # to deliver them just like static files.
      /docroot "/usr/local/var/www"

      # Sets the level upto which files named ".stat" will be created in the
      # document root of the webserver. When an activation request for some
      # page is received, only files within the same subtree are affected
      # by the invalidation.
      /statfileslevel "4"
      
      # Flag indicating whether to cache responses to requests that contain
      # authorization information.
      # One must ensure that the cache rules section below does not include
      # resources with user specific information.
      #/allowAuthorized "0"
      
      # Flag indicating whether the dispatcher should serve stale content if
      # no remote server is available.
      #/serveStaleOnError "0"
      
      # The rules section defines what responses should be cached based on
      # the requested URL. Please note that only the following requests can
      # lead to cacheable responses:
      #
      # - HTTP method is GET
      # - URL has an extension
      # - Request has no query string
      # - Request has no "Authorization" header (unless allowAuthorized is 1)
      /rules
        {
        /0000
          {
          # the globbing pattern to be compared against the url
          # example: *             -> everything
          #        : /foo/bar.*    -> only the /foo/bar documents
          #        : /foo/bar/*    -> all pages below /foo/bar
          #        : /foo/bar[./]* -> all pages below and /foo/bar itself
          #        : *.html        -> all .html files
          /glob "*"
          /type "allow"
          }
        /0009
          {
          /glob "*.nocache.html*"
          /type "deny"
          }
        /0044 { /type "deny" /glob "/libs/granite/security/currentuser.json" }  # data must not be cached
        /0045 { /type "deny" /glob "/libs/granite/dispatcher/content/vanityUrls.html" }  # data must not be cached
        /0090 { /type "deny" /glob "/content/screens/svc.channels.json" }
        /0091 { /type "deny" /glob "/content/screens/svc/channels.channels.json" }
        /0092 { /type "deny" /glob "/screens/channels.json" }
        # https://helpx.adobe.com/experience-manager/dispatcher/using/configuring-dispatcher-to-prevent-csrf.html
        /0999 { /glob "/libs/granite/csrf/token.json" /type "deny" }
        }
        
      # The invalidate section defines the pages that are "invalidated" after
      # any activation. Please note that the activated page itself and all
      # related documents are flushed on an modification. For example: if the
      # page /foo/bar is activated, all /foo/bar.* files are removed from the
      # cache.
      /invalidate
        {
        /0000
          {
          /glob "*"
          /type "deny"
          }
        /0001
          {
          # Consider all HTML files stale after an activation.
          /glob "*.html"
          /type "allow"
          }
        /0002
          {
          /glob "/etc/segmentation.segment.js"
          /type "allow"
          }
        /0003
          {
          /glob "*/analytics.sitecatalyst.js"
          /type "allow"
          }
        /0099
          {
          /glob "/content/forms/**/*.html"
          /type "allow"
          }
        }

      # The allowedClients section restricts the client IP addresses that are
      # allowed to issue activation requests.
      /allowedClients
        {
        # Uncomment the following to restrict activation requests to originate
        # from "localhost" only.
        #
        /0000
          {
          /glob "*"
          /type "deny"
          }
        /0001
          {
          /glob "127.0.0.1"
          /type "allow"
          }
        /0002
          {
          /glob "192.168.*.*"
          /type "allow"
          }
        /0003
          {
          /glob "172.1[6-9].*.*"
          /type "allow"
          }
        /0004
          {
          /glob "172.2[0-9].*.*"
          /type "allow"
          }
        /0005
          {
          /glob "172.3[0-1].*.*"
          /type "allow"
          }
        /0006
          {
          /glob "10.*.*.*"
          /type "allow"
          }
        }
        
      # The ignoreUrlParams section contains query string parameter names that
      # should be ignored when determining whether some request's output can be
      # cached or delivered from cache.
      #
      # In this example configuration, the "q" parameter will be ignored.
      #/ignoreUrlParams
      #  {
      #  /0001 { /glob "*" /type "deny" }
      #  /0002 { /glob "q" /type "allow" }
      #  }

      # Cache response headers next to a cached file. On the first request to
      # an uncached resource, all headers matching one of the values found here
      # are stored in a separate file, next to the cache file. On subsequent
      # requests to the cached resource, the stored headers are added to the
      # response.
      #
      # Note, that file globbing characters are not allowed here.
      #
      /headers
        # http://www.iana.org/assignments/message-headers/message-headers.xhtml
        {
        # https://tools.ietf.org/html/rfc6265
        #"Set-Cookie"
        # https://tools.ietf.org/html/rfc6266
        "Content-Disposition"
        # https://tools.ietf.org/html/rfc6797
        "Strict-Transport-Security"
        # https://tools.ietf.org/html/rfc7034
        "X-Frame-Options"
        # https://tools.ietf.org/html/rfc7230#section-5.7
        "Via"
        # https://tools.ietf.org/html/rfc7230#section-6
        "Connection"
        "Upgrade"
        # https://tools.ietf.org/html/rfc7231#section-3
        # 3.1. Representation Metadata
        "Content-Type"
        #"Content-Encoding"
        "Content-Language"
        "Content-Location"
        # 3.3. Payload Semantics
        "Content-Length"
        "Content-Range"
        "Trailer"
        #"Transfer-Encoding"
        # https://tools.ietf.org/html/rfc7231#section-7
        # 7.1. Control Data
        "Age"
        "Cache-Control"
        "Expires"
        "Date"
        "Location"
        "Retry-After"
        "Vary"
        "Warning"
        # 7.2. Validator Header Fields
        "ETag"
        "Last-Modified"
        # 7.3. Authentication Challenges
        "WWW-Authenticate"
        "Proxy-Authenticate"
        # 7.4. Response Context
        "Accept-Ranges"
        "Allow"
        "Server"
        # https://tools.ietf.org/html/rfc7239
        "Forwarded"
        # https://tools.ietf.org/html/rfc7540
        "HTTP2-Settings"
        # https://tools.ietf.org/html/rfc8288
        "Link"
        # https://www.w3.org/TR/CSP3/
        "Content-Security-Policy"
        "Content-Security-Policy-Report-Only"
        # https://fetch.spec.whatwg.org/#x-content-type-options-header
        "X-Content-Type-Options"
        # https://developer.mozilla.org/docs/Web/HTTP/Headers/X-XSS-Protection
        "X-XSS-Protection"
        # https://www.w3.org/TR/cors/
        "Access-Control-Allow-Origin"
        "Access-Control-Allow-Credentials"
        "Access-Control-Expose-Headers"
        "Access-Control-Max-Age"
        "Access-Control-Allow-Methods"
        "Access-Control-Allow-Headers"
        }

      # A grace period defines the number of seconds a stale, auto-invalidated
      # resource may still be served from the cache after the last activation
      # occurring. Auto-invalidated resources are invalidated by any activation,
      # when their path matches the /invalidate section above. This setting
      # can be used in a setup, where a batch of activations would otherwise
      # repeatedly invalidate the entire cache.
      #
      /gracePeriod "2"

      # Enable TTL evaluates the response headers from the backend, and if they
      # contain a Cache-Control max-age or Expires date, an auxiliary, empty file
      # next to the cache file is created, with modification time equal to the
      # expiry date. When the cache file is requested past the modification time
      # it is automatically re-requested from the backend.
      #
      /enableTTL "1"

      }
