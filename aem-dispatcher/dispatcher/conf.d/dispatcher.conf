Define httpd_logs logs
Define documentroot /usr/local/var/www


# If your load balancer or proxy fails to set the X-Forwarded-Proto header,
# then you can set it at the web server or dispatcher level.
# If you are using Apache HTTP Server, then update your HTTPS VirtualHost with this directive:
#<IfModule mod_headers.c>
#    RequestHeader set X-Forwarded-Proto "https" early
#    RequestHeader set X-Forwarded-Port 443 early
#</IfModule>


# configure the minimal setting for the dispatcher
# the main configuration is read from the 'DispatcherConfig' file.
#
<IfModule disp_apache2.c>

    # location of the configuration file. eg: 'conf/dispatcher.any'
    DispatcherConfig conf.d/dispatcher.any

    # location of the dispatcher log file. eg: '${httpd_logs}/dispatcher.log'
    # if unspecified, dispatcher log messages will be directed to Apache's standard error log, alongside messages from other modules
    # no log rotation (or external rotation, e.g. logrotate)
#    DispatcherLog    "${httpd_logs}/dispatcher.log"
    # monthly log rotation
#    DispatcherLog    '|@@${HTTPD_ROTATELOGS}@@ -f -L ${httpd_logs}/dispatcher.log ${httpd_logs}/dispatcher-%Y-%m.log 2629800'
    # weekly log rotation
    DispatcherLog    '|@@${HTTPD_ROTATELOGS}@@ -f -L ${httpd_logs}/dispatcher.log ${httpd_logs}/dispatcher-%G-%V.log 604800'

    # log level for the dispatcher log, can be either specified
    # as a string or an integer (in parentheses)
    # error(0): Errors
    # warn(1):  Warnings
    # info(2):  Infos
    # debug(3): Debug
    # trace(4): Trace
    DispatcherLogLevel warn
    LogLevel dispatcher:warn

    # For better monitoring/analysis, create a custom log format for dispatcher
    # requests, similar to AEM's request.log
    LogFormat "%t \"%m %{dispatcher:uri}e%q %H\" %{dispatcher:status}e %{dispatcher:cache}e [%{dispatcher:backend}e] %{ms}Tms" dispatcher
    CustomLog "${httpd_logs}/dispatcher.log" dispatcher "expr=%{HANDLER} == 'dispatcher-handler'"

    # if turned on, request to / are not handled by the dispatcher
    # use the mod_alias then for the correct mapping
    DispatcherDeclineRoot Off

    # if turned on, the dispatcher uses the URL already processed
    # by handlers preceeding the dispatcher (i.e. mod_rewrite)
    # instead of the original one passed to the web server.
    DispatcherUseProcessedURL On

    # if turned to 1, the dispatcher does not spool an error
    # response to the client (where the status code is greater
    # or equal than 400), but passes the status code to
    # Apache, which e.g. allows an ErrorDocument directive
    # to process such a status code.
    #
    # Additionally, one can specify the status code ranges that should
    # be left to web server to handle, e.g.
    #
    # DispatcherPassError 400-404,501
    DispatcherPassError 0

    #
    # DispatcherKeepAliveTimeout specifies the number of seconds a
    # connection to a backend should be kept alive. If not set or
    # set to zero, connections are not kept alive.
    #
    #DispatcherKeepAliveTimeout 60

    #
    # DispatcherSSINoCache specifies whether not to cache SSI included file.
    # If set to Off, the included files are cached, otherwise, they are not cached.
    #
    # In a highly concurrent environment, a cached SSI included file might get
    # deleted at the same time it is about to get delivered, which results in
    # malformed responses. If you encounter such issues, it is best to turn
    # this option to On.
    #DispatcherSSINoCache Off

    #
    # DispatcherRestrictUncacheableContent specifies whether to remove cache control headers 
    # which helps in client caching or not. If set to on, the cache control headers 
    # are removed for uncacheable content, otherwise, not.
    DispatcherRestrictUncacheableContent Off

</IfModule>


# document root for web server
DocumentRoot "${documentroot}"

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
